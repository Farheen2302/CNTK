ConvReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue)
{
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = Parameter(outMap, 1, init = fixedValue, value = bValue)
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true)
    p = Plus(c, b);
    y = RectifiedLinear(p);
}

ConvBNReLULayer(inp, inMap, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue)
{
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = Parameter(inMap, 1, init = Gaussian, initValueScale = 0.03)
    sc = Parameter(inMap, 1, init = Gaussian, initValueScale = 0.03)
    m = Parameter(inMap, 1, init = fixedValue, value = 0, needGradient = false)
    isd = Parameter(inMap, 1, init = fixedValue, value = 0, needGradient = false)
    bn = BatchNormalization(inp, sc, b, m, isd, eval = false, spatial = true)
    c = Convolution(W, bn, kW, kH, outMap, hStride, vStride, zeroPadding = true)
    y = RectifiedLinear(c);
}

ConvBNReLULayer2(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue)
{
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc = Parameter(outMap, 1, init = Gaussian, initValueScale = scValue)
    m = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    isd = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true)
    bn = BatchNormalization(c, sc, b, m, isd, eval = false, spatial = true, expAvgFactor = 1.0)
    y = RectifiedLinear(bn);
}

ResNetNode2(inp, outMap, inWCount, kW, kH, wScale, bValue, scValue)
{
    W1 = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b1 = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc1 = Parameter(outMap, 1, init = Gaussian, initValueScale = scValue)
    m1 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    isd1 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    
    c1 = Convolution(W1, inp, kW, kH, outMap, 1, 1, zeroPadding = true)
    bn1 = BatchNormalization(c1, sc1, b1, m1, isd1, eval = false, spatial = true, expAvgFactor = 1.0)
    y1 = RectifiedLinear(bn1);
    
    W2 = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b2 = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc2 = Parameter(outMap, 1, init = Gaussian, initValueScale = scValue)
    m2 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    isd2 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    
    c2 = Convolution(W2, y1, kW, kH, outMap, 1, 1, zeroPadding = true)
    bn2 = BatchNormalization(c2, sc2, b2, m2, isd2, eval = false, spatial = true, expAvgFactor = 1.0)
    p = Plus(bn2, inp)
    y2 = RectifiedLinear(p);
}

ResNetNode2Conv(inp, outMap, inWCount, wCount, kW, kH, wScale, bValue, scValue, Wproj)
{
    W1 = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b1 = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc1 = Parameter(outMap, 1, init = Gaussian, initValueScale = scValue)
    m1 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    isd1 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    
    c1 = Convolution(W1, inp, kW, kH, outMap, 2, 2, zeroPadding = true)
    bn1 = BatchNormalization(c1, sc1, b1, m1, isd1, eval = false, spatial = true, expAvgFactor = 1.0)
    y1 = RectifiedLinear(bn1);
    
    W2 = Parameter(outMap, wCount, init = Gaussian, initValueScale = wScale)
    b2 = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc2 = Parameter(outMap, 1, init = Gaussian, initValueScale = scValue)
    m2 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    isd2 = Parameter(outMap, 1, init = fixedValue, value = 0, needGradient = false)
    
    c2 = Convolution(W2, y1, kW, kH, outMap, 1, 1, zeroPadding = true)
    bn2 = BatchNormalization(c2, sc2, b2, m2, isd2, eval = false, spatial = true, expAvgFactor = 1.0)
    
    cproj = Convolution(Wproj, inp, 1, 1, outMap, 2, 2, zeroPadding = false)
    p = Plus(bn2, cproj)
    y2 = RectifiedLinear(p);
}

DnnReLULayer(inDim, outDim, x, wScale, bValue)
{
    W = Parameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = Parameter(outDim, 1, init = fixedValue, value = bValue) 
    t = Times(W, x)
    z = Plus(t, b)
    y = RectifiedLinear(z)
}

DnnBNReLULayer(inDim, outDim, x, wScale, bValue)
{
    W = Parameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = Parameter(inDim, 1, init = fixedValue, value = bValue) 
    sc = Parameter(inDim, 1, init = Gaussian, initValueScale = 0.01)
    m = Parameter(inDim, 1, init = fixedValue, value = 0, needGradient = false)
    isd = Parameter(inDim, 1, init = fixedValue, value = 0, needGradient = false)
    bn = BatchNormalization(x, sc, b, m, isd, eval = false, spatial = false)
    t = Times(W, bn)
    y = RectifiedLinear(t)
}

DnnLastLayer(hiddenDim, labelDim, x, wScale, bValue)
{
    W = Parameter(labelDim, hiddenDim, init = Gaussian, initValueScale = wScale)
    b = Parameter(labelDim, init = fixedValue, value = bValue)
    t = Times(W, x)
    z = Plus(t, b)
}
